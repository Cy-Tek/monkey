# Base style configuration derived from the LLVM coding standards.
BasedOnStyle: LLVM
# Here, the indentation width is set to 2 spaces.
IndentWidth: 2
# Continuing lines will align with the opening delimiter.
AlignAfterOpenBracket: Align
# Align consecutive assignments.
AlignConsecutiveAssignments: true
# Align consecutive declarations.
AlignConsecutiveDeclarations: true
# Aligns escaped newlines as far left as possible.
AlignEscapedNewlines: Left
# Allow short blocks on a single line.
AllowShortBlocksOnASingleLine: true
# Allow short case labels on a single line.
AllowShortCaseLabelsOnASingleLine: true
# Allow short functions on a single line.
AllowShortFunctionsOnASingleLine: Inline
# Allow short if statements on a single line.
AllowShortIfStatementsOnASingleLine: true
# Allow short loops on a single line.
AllowShortLoopsOnASingleLine: true
# Set to false to not indent namespaces.
NamespaceIndentation: None
# The column limit for each line.
ColumnLimit: 80
# Penalty for breaking a function call after call.
PenaltyBreakBeforeFirstCallParameter: 19
# Penalty for each line break introduced inside a comment.
PenaltyBreakComment: 300
# Penalty for breaking before the first template parameter.
PenaltyBreakFirstLessLess: 120
# Controls the formatting of braces. Use 'Attach' to attach braces to surrounding context.
BreakBeforeBraces: Attach
# Indent preprocessor directives at the start of a line.
IndentPPDirectives: None
# Whether to indent preprocessor directives inside of `#if` sections.
#PPIndentWidth: 2
# Ensure the alignment of operands in assignments and comparisons is taken into account.
AlignOperands: true
# Sort includes.
SortIncludes: true
# Set pointer and reference alignment style.
PointerAlignment: Left
# The maximum number of consecutive empty lines to keep.
MaxEmptyLinesToKeep: 1
# Use tabs only for indentation.
UseTab: Never
